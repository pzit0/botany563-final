list.files()
library(diaQTL)
getwd()
setwd("Users/pzito/Applications/Box/")
setwd("Users/pzito/Applications/")
setwd("/Users/pzito/Library/CloudStorage/Box-Box/spring-2023/genetic-mapping/HW9")
list.files()
getwd()
setwd("/Users/pzito/Library/CloudStorage/Box-Box/spring-2023/genetic-mapping/HW9")
getwd()
data <- read.cross(format = "csvs", dir = ".", genfile = "SMgeno.csv", phefile = "SMpheno.csv")
library(diaQTL)
data <- read.cross(format = "csvs", dir = ".", genfile = "SMgeno.csv", phefile = "SMpheno.csv")
library(wtl)
library(qtl)
data <- read.cross(format = "csvs", dir = ".", genfile = "SMgeno.csv", phefile = "SMpheno.csv")
data <- jittermap(data)
data$geno
data$pheno
data <- calc.genoprob(data, step = 0.5, error.prob = 0.01,
map.function = "kosambi", stepwidth = "max")
ans.hk <- scanone(data, model = "normal", method="hk",pheno="LWratio")
data$pheno
colnames(data$pheno)
ans.hk <- scanone(data, model = "normal", method = "hk", pheno = "amylase") # WHICH PHENOTYPE??
map <- pull.map(data,as.table=TRUE)
sum(tapply(map$pos,map$chr,max))  #Map length
ans.hk <- scanone(data, model = "normal", method = "hk", pheno = "malt") # WHICH PHENOTYPE??
map <- pull.map(data,as.table=TRUE)
sum(tapply(map$pos,map$chr,max))
thresh(G = 1061, cross = "BC", p = 0.05)
library(qtl)
thresh(G = 1061, cross = "BC", p = 0.05)
library(diaQTL)
thresh(G = 1061, cross = "BC", p = 0.05)
colnames(data$pheno)
ans.perm <- scanone(data2,model="normal",method="mr",pheno="amylase", n.perm=1000)
ans.perm <- scanone(data,model="normal",method="mr",pheno="amylase", n.perm=1000)
summary(ans.perm)
# thresh doesn't work for some reason??
thresh(G=1061, cross="BC", p=0.05)
summary(ans.perm)
powercalc(cross="bc",n=200,effect=2,sigma2=9,thresh=2.86)
library(qtlDesign)
install.packages("qtlDesign")
library(BiocManager)
BiocManager::install("qtlDesign")
powercalc(cross="bc",n=200,effect=2,sigma2=9,thresh=2.86)
library(qtlDesign) # installed w BiocManager
nrow(data$geno)
data$geno
length(data$geno    )
length(data$geno)
dim(data$geno)
install.packages(qtlDesign)
install.packages("qtlDesign")
ans.hk <- scanone(data, model = "normal", method = "hk", pheno = "protein.grain")
ans <- scanone(data, model = "normal", method = "hk", pheno = "grain.protein")
plot(ans)
ans <- scanone(data, model = "normal", method = "em", pheno = "grain.protein")
bayesint(ans,prob=0.95)
ans
table(ans$chr)
plot(ans)
bayesint(ans,chr = 4, prob=0.95)
sim1 <- calc.genoprob(sim1,step=0.5,error.prob=0.01,
map.function="kosambi",stepwidth="max")
ans4 <- calc.genoprob(data,step=0.5,error.prob=0.01,
map.function="kosambi",stepwidth="max")
ans <- scanone(ans4,model="normal",method="hk",pheno="grain.protein")
plot(ans)
bayesint(ans,chr = 4, prob=0.95) # need R2
ans4 <- calc.genoprob(data,step=0.5,error.prob=0.01,
map.function="kosambi",stepwidth="max")
ans <- scanone(ans4,model="normal",method="hk",pheno="grain.protein")
plot(ans)
bayesint(ans,chr = 4, prob=0.95) # need R2
powercalc(cross="bc", n=200, effect=2, sigma2=9, thresh=2.86)
install.packages(qtlDesign)
install.packages("qtlDesign")
BiocManager::install("qtlDesign")
library(qtlDesign)
install.packages("~/Library/CloudStorage/Box-Box/spring-2023/genetic-mapping/HW9/qtlDesign_0.941.tar.gz", repos = NULL, type = "source")
library(qtlDesign)
thresh(G=1061, cross="BC", p=0.05)
thresh(G=1061, cross="bc", p=0.05)
threshold <- thresh(G=1061, cross="bc", p=0.05)
threshold
powercalc(cross="bc", n=200, effect=2, sigma2=9, thresh=threshold)
?powercalc
powercalc(cross = "bc", n = 400, effect = 2, sigma2 = 9, thresh = threshold)
powercalc(cross = "bc", n = 200, effect = 2, sigma2 = 10, thresh=threshold)
sum(tapply(map$pos, map$chr, max))
# effect =
powercalc(cross = "ri", n = 200, effect = 2, sigma2 = 9, thresh = threshold)
powercalc(cross = "ri", n = 400, effect = 2, sigma2 = 9, thresh = threshold)
powercalc(cross = "ri", n = 400, effect = 2, sigma2 = 9, thresh = threshold)
# effect =
powercalc(cross = "ri", n = 200, effect = 2, sigma2 = 9, thresh = threshold)
# effect =
powercalc(cross = "ri", n = 200, effect = 1, sigma2 = 9, thresh = threshold)
powercalc(cross = "ri", n = 400, effect = 1, sigma2 = 9, thresh = threshold)
powercalc(cross = "ri", n = 400, effect = 1, sigma2 = 9, thresh = threshold)
?thresh
data$geno
table(data$geno)
?fitqtl
?makeqtl
?fitqtl
# from BeavisEffect
qtl <- makeqtl(cross = ans, chr = 4, what = "prob")
head(data$geno)
data$geno[1]
bayesint(ans,chr = 4, prob=0.95) # need R2
data <- read.cross(format = "csvs", dir = ".", genfile = "SMgeno.csv", phefile = "SMpheno.csv")
data <- jittermap(data)
colnames(data$pheno)
map <- pull.map(data,as.table=TRUE)
sum(tapply(map$pos, map$chr, max))
threshold <- thresh(G = 1061, cross = "bc", p = 0.05)
threshold
# effect =  For RIL (or DH) pops, the argument equals half the differences between the homozygotes.
# not sure how to recode one of the homozygotes
powercalc(cross = "ri", n = 200, effect = 1, sigma2 = 9, thresh = threshold)
powercalc(cross = "ri", n = 400, effect = 1, sigma2 = 9, thresh = threshold)
ans <- calc.genoprob(data,step=0.5,error.prob=0.01,
map.function="kosambi",stepwidth="max")
ans.hk <- scanone(ans,model="normal",method="hk",pheno="grain.protein")
bayesint(ans,chr = 4, prob=0.95) # need R2
bayesint(ans.hk,chr = 4, prob=0.95) # need R2
plot(ans)
plot(ans.hk)
summary(ans.hk)
plot(ans.hk)
qtl <- makeqtl(data, chr = "5", pos = "51.2" ,what="prob")
qtl <- makeqtl(ans, chr = "5", pos = "51.2", what="prob")
qtl <- makeqtl(ans.hk, chr = "5", pos = "51.2", what="prob")
qtl <- makeqtl(ans, chr = 5, pos = 51.2, what="prob")
fit.ans <- fitqtl(data,pheno.col="LWratio",qtl=qtl,
method="hk",formula=~Q1+Q2+Q1:Q2)
fit.ans <- fitqtl(data, pheno.col="grain.protein", qtl = qtl,
method = "hk", formula = ~Q1+Q2+Q1:Q2)
fit.ans <- fitqtl(ans, pheno.col="grain.protein", qtl = qtl,
method = "hk", formula = ~Q1+Q2+Q1:Q2)
fit.ans <- fitqtl(ans, pheno.col="grain.protein", qtl = qtl, method = "hk")
summary(fit.ans)
summary(ans.hk)
qtl <- makeqtl(ans, chr = c(4, 5), pos = c(100.2, 51.2), what="prob")
fit.ans <- fitqtl(ans, pheno.col="grain.protein", qtl = qtl, method = "hk")
summary(fit.ans)
summary(ans.hk)
dim(data)
length(dat)
length(data)
# for all qtl from the ans.hk
get_r2 <- function(LOD, n){
ans <- 1-10^(2*LOD/n)
return(ans)
}
sum <- summary(ans.hk)
sum
sum[,1]
sum[,2]
sum[,3]
sum[1,3]
r2 <- c()
for(i in 1:7){
r2 <- append(r2, get_r2(sum[i,3]), n = 200)
}
r2 <- append(r2, get_r2(sum[i,3], n = 200))
for(i in 1:7){
r2 <- append(r2, get_r2(sum[i,3], n = 200))
}
r2
cbind(sum, r2)
r2 <- c()
for(i in 1:7){
r2 <- append(r2, get_r2(sum[i,3], n = 200))
}
cbind(sum, r2)
qtl <- makeqtl(ans, chr = sum[,1], pos = sum[,2], what="prob")
fit.ans <- fitqtl(ans, pheno.col="grain.protein", qtl = qtl, method = "hk")
summary(fit.ans)
# effect =  For RIL (or DH) pops, the argument equals half the differences between the homozygotes.
# not sure how to recode one of the homozygotes
powercalc(cross = "ri", n = 200, effect = 1, sigma2 = 10, thresh = threshold)
powercalc(cross = "ri", n = 200, effect = 1, sigma2 = 20, thresh = threshold)
qtl <- makeqtl(ans, chr = sum[,1], pos = sum[,2], what="prob")
fit.ans <- fitqtl(ans, pheno.col="grain.protein", qtl = qtl, method = "hk", formula = ~Q1+Q2)
summary(fit.ans)
quartz()
effectplot(data,pheno.col="grain.protein",mname1 = "5@51.2")
data
10
# effect =  For RIL (or DH) pops, the argument equals half the differences between the homozygotes.
# not sure how to recode one of the homozygotes
powercalc(cross = "ri", n = 91, effect = 1, sigma2 = 10, thresh = threshold)
# effect =  For RIL (or DH) pops, the argument equals half the differences between the homozygotes.
# not sure how to recode one of the homozygotes
powercalc(cross = "ri", n = 91, effect = 1, sigma2 = 11, thresh = threshold)
# effect =  For RIL (or DH) pops, the argument equals half the differences between the homozygotes.
# not sure how to recode one of the homozygotes
powercalc(cross = "ri", n = 91, effect = 1, sigma2 = 9, thresh = threshold)
powercalc(cross = "ri", n = 91, effect = 1, sigma2 = 2, thresh = threshold)
powercalc(cross = "ri", n = 91, effect = 1, sigma2 = 3, thresh = threshold)
powercalc(cross = "ri", n = 91, effect = 1, sigma2 = 4, thresh = threshold)
# effect =  For RIL (or DH) pops, the argument equals half the differences between the homozygotes.
# not sure how to recode one of the homozygotes
powercalc(cross = "ri", n = 91, effect = 1, sigma2 = 9, thresh = threshold)
powercalc(cross = "ri", n = 91, effect = 1, sigma2 = 4, thresh = threshold)
fit.ans2 <- fitqtl(ans, pheno.col="grain.protein",qtl = qtl, method="hk",formula=~Q1+Q2,get.ests=TRUE)
summary(fit.ans2)
getwd()
setwd("/Users/pzito/Desktop/botany563-final/data/")
setwd("/Users/pzito/Desktop/botany563-final/data/orthologs")
list.files()
data <- read.csv("ortholgs-filtered-NHEless-manual_added.csv")
data <- read.csv("ortholgs-filtered-NHEless-manual_added.csv")
setwd("/Users/pzito/Desktop/botany563-final/data/orthologs")
getwd()
setwd("/Users/pzito/Desktop/botany563-final/data/orthologs/")
getwd()
data <- read.csv("ortholgs-filtered-NHEless-manual_added")
setwd("/Users/pzito/Desktop/botany563-final/data/orthologs/")
data <- read.csv("ortholgs-filtered-NHEless-manual_added.csv")
list.files
list.files(".")
list.files("./Desktop/botany563-final/data/orthologs/")
data <- read.csv("orthologs-filtered-NHEless-manual_added.csv")
library(dplyr)
as.tibble(data)
as_tibble(data)
table(data$comments)
table(data$type)
data%>%select(grep("Acromymyrex", data$species))
select(grep("Acromymyrex", data$species))
?select
data %>% filter("Acromyrex" in species)
data %>% filter(species == "Acromyrmex echinatior")
data %>% filter(species == "Acromyrmex echinatior") %>% select(protein.accession)
check("Acromyrex echinatior")
check <- function(species_name){
return(data %>% filter(species == species_name) %>% select(protein.accession))
}
check("Acromyrex echinatior")
check("Acromyrmex echinatior")
unique(data$species)
?order()
sort(unique(data$species))
return(data %>% filter(species == species_name) %>% select(species, protein.accession))
check <- function(species_name){
return(data %>% filter(species == species_name) %>% select(species, protein.accession))
}
all_species <- sort(unique(data$species))
for(name in 1:lenght(all_species)){
check(name)
}
for(name in 1:length(all_species)){
check(name)
}
# example
check(all_species[1])
for(i in 1:length(all_species)){
check(all_species[i])
}
for(i in 1:length(all_species)){
print(i)
check(all_species[i])
}
length(unique(data$species))
table(data$species) # how many paralogs per species
check(all_species[1])
check(all_species[2])
check(all_species[3])
for(i in 1:length(all_species)){
check(all_species[i])
}
for(i in 1:length(all_species)){
print(check(all_species[i]))
}
table(data$type, data$species)
table(data$species, data$type)
table(data$type) # type
data%>%filter(type == "barnacle")
data%>%filter(type == "barnacle")%>%select(species)
# all crustacean species
crustacean <- data%>%filter(type=="barnacle"|type=="copepod"|type=="shrimp")%>%select(species)
crustacean
length(unique(crustacean))
crustacean
nrow(unique(crustacean))
# all chelicerate species
chelicerate <- data%>%filter(type=="spider")%>%select(species)
chelicerate
nrow(unique(chelicerate))
# all hexapod species
hexapod <- data%>%filter(type=="cockroach"|type=="diptera"|type=="ephemera"|type=="hemiptera"|type=="hymenoptera"|type=="lepidoptera"|type=="thysanoptera")
hexapod
# all hexapod species
hexapod <- data%>%filter(type=="cockroach"|type=="diptera"|type=="ephemera"|type=="hemiptera"|type=="hymenoptera"|type=="lepidoptera"|type=="thysanoptera")%>%select(species)
hexapod
nrow(unique(hexapod))
nrow(unique(chelicerate))
nrow(unique(crustacean))
28+2+4
nrow(data)
setwd("/Users/pzito/Library/CloudStorage/Box-Box/spring-2023/genetic-mapping/HW10")
source("~/.active-rstudio-document", echo=TRUE)
library(qtl)
data <- read.cross(format = "csvs", dir = ".", genfile = "potatoF2_geno_pigmented.csv", phefile = "potatoF2_pheno_pigmented.csv")
data <- jittermap(data)
colnames(data$pheno)
ans <- calc.genoprob(data, step = 0.5, error.prob = 0.01, map.function = "kosambi", stepwidth = "max")
data$pheno
ans.hk <- scanone(ans, model = "normal", method = "hk", pheno = "FleshColor")
ans.hk
plot(ans.hk)
library(diaQTL)
map <- pull.map(data, as.table=TRUE)
sum(tapply(map$pos, map$chr, max))
thresh(G=883, cross="f2", p=0.05)
library(diaQTL)
thresh(G=883, cross="f2", p=0.05)
library(qtlDesign)
thresh(G=883, cross="f2", p=0.05)
plot(ans.hk)
sum(tapply(map$pos, map$chr, max))
thresh(G=883, cross="f2", p=0.05)
plot(ans.hk)
abline(a = 0, b = thresh(G=883, cross="f2", p=0.05))
abline(a = thresh(G=883, cross="f2", p=0.05))
?abline
plot(ans.hk)
abline(a = thresh(G=883, cross="f2", p=0.05), b = 0)
plot(ans.hk)
abline(a = thresh(G=883, cross="f2", p=0.05), b = 0, col = "red")
ans.hk
library(dplyer)
library(dplyr)
ans.hk # all qtl
as_tibble(ans.hk)%>%filter(lod >= thresh(G=883, cross="f2", p=0.05))
plot(ans.hk)
head(as_tibble(ans.hk)%>%filter(lod >= thresh(G=883, cross="f2", p=0.05)))
?sort
all_sig <- as_tibble(ans.hk)%>%filter(lod >= thresh(G=883, cross="f2", p=0.05)) # all significant markers
head(sort(all_sig, decreasing = FALSE))
sort(all_sig)
?order
head(all_sig[order(all_sig$lod, decreasing = FALSE)])
head(all_sig[order(all_sig$lod)])
head(all_sig[order(all_sig$lod),])
?head
head(all_sig[order(all_sig$lod),], n = 10) # summary of the markers with highest lod scores
ans2 <- scantwo(data, model="normal", method="hk", pheno="FleshColor")
summary(ans2)
perm2 <- scantwo(sim1,model="normal",method="hk",pheno="phenotype",n.perm = 1000)
perm2 <- scantwo(data, model="normal",method="hk",pheno="phenotype",n.perm = 1000)
perm2 <- scantwo(data, model="normal",method="hk",pheno="FleshColor",n.perm = 1000)
perm2 <- scantwo(data, model="normal", method="hk", pheno="FleshColor", n.perm = 1000)
source("~/.active-rstudio-document", echo=TRUE)
