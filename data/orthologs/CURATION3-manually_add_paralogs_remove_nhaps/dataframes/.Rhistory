length(unique(data3$species)) # how many species
table(data3$species) # how many paralogs per species
mean(table(data23species)) # mean number of paralogs per species
nrow(data3_cleaned) # number of sequences
length(unique(data3$species)) # how many species
table(data3$species) # how many paralogs per species
mean(table(data3species)) # mean number of paralogs per species
nrow(data3_cleaned) # number of sequences
length(unique(data3$species)) # how many species
table(data3$species) # how many paralogs per species
mean(table(data3$species)) # mean number of paralogs per species
nrow(data3_cleaned%>%distinct(data3_cleaned$protein.accession))
data3_cleaned%>%distinct(data3_cleaned$protein.accession)
data3[unique(data3$protein.accession)]
data3[unique(data3$protein.accession),]
length(unique(data3$protein.accession))
data3[which(unique(data3$protein.accession)),]
unique(data3$protein.accession)
# remove duplicates
data3 %>% distinct(protein.accession)
data3
# remove duplicates
a <- data3 %>% distinct(protein.accession)
a
?distinct
?unique
data3[unique(protein.accession), ]
data3[unique(data3$protein.accession), ]
?duplicated
duplicated(data3)
duplicated(data3$project.accession)
length(duplicated(data3$protein.accession))
length(data3[duplicated(data3$protein.accession),])
nrow(data3[duplicated(data3$protein.accession),])
unique(data3$protein.accession)
data3[which(data3$protein.accession %in% unique(data3$protein.accession),]
data3[which(data3$protein.accession) %in% unique(data3$protein.accession),]
data3[which(data3$protein.accession %in% unique(data3$protein.accession)),]
a <= data3[which(data3$protein.accession %in% unique(data3$protein.accession)),]
a <- data3[which(data3$protein.accession %in% unique(data3$protein.accession)),]
a
# remove duplicates
data3 <- data3[which(data3$protein.accession %in% unique(data3$protein.accession)),]
# export fasta file
write_fasta("2023-04-28-orthologs-all-blast-prot-res.fasta", data3)
seqs3 <- readAAStringSet(file = "2023-04-28-orthologs-all-blast-prot-res.fasta")
seq_name = data3$fasta.names
sequence = data3$protein.sequence
for(i in 1:length(sequence)){
seq <- AAString(toupper(sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
} else if (NHE_score <= NHA_score & NHA_score < 0){
paste(seq_name[i], "passed the test, but it still did not align well with NHA")
}
}
# these are the NHE sequences (maybe)
seq_name[index_list]
length(seq_name[index_list])
# this the the cleaned dataframe
data3_cleaned <- data3[-which(data3$fasta.names %in% seq_name[index_list]),]
nrow(data3_cleaned) # number of sequences
table(data3$species) # how many paralogs per species
length(unique(data3$species)) # how many species
mean(table(data3$species)) # mean number of paralogs per species
# export
write.csv(data3_cleaned, "2023-04-28-orthologs-all-blast-prot-res-noNHE.csv")
write_fasta("2023-04-28-orthologs-all-blast-prot-res-noNHE.fasta", data3_cleaned)
data3 <- read.csv("2023-04-28-orthologs-all-blast-prot-res.csv") # data containing all blast results for paralog search, this has already been filtered for assembly quality, but not for conserved domains
as_tibble(data3)
nrow(data3) # number of sequences
fasta.names <- c()
for(i in 1:nrow(data3)){
species.name <- str_replace(data3[i, "species"], " ", "-")
partial.name <- paste(species.name, data3[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
fasta.names <- append(fasta.names, fasta.name)
}
fasta.names <- c()
for(i in 1:nrow(data3)){
species.name <- str_replace(data3[i, "species"], " ", "-")
partial.name <- paste(species.name, data3[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
fasta.names <- append(fasta.names, fasta.name)
}
data3 <- cbind(data3, fasta.names)
# remove duplicates
data3 <- data3[which(data3$protein.accession %in% unique(data3$protein.accession)),]
nrow(data3)
duplicated(data3$protein.accession)
nrow(data3[-duplicated(data3$protein.accession),])
length(which(duplicated))
length(which(duplicated(data3$protein.accession)))
nrow(data3[-which(duplicated(data3$protein.accession)),])
197+86
# remove duplicates
data3 <- data3[-which(duplicated(data3$protein.accession)),]
nrow(data3)
# export fasta file
write_fasta("2023-04-28-orthologs-all-blast-prot-res.fasta", data3)
seqs3 <- readAAStringSet(file = "2023-04-28-orthologs-all-blast-prot-res.fasta")
seq_name = data3$fasta.names
sequence = data3$protein.sequence
for(i in 1:length(sequence)){
seq <- AAString(toupper(sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
} else if (NHE_score <= NHA_score & NHA_score < 0){
paste(seq_name[i], "passed the test, but it still did not align well with NHA")
}
}
# these are the NHE sequences (maybe)
seq_name[index_list]
length(seq_name[index_list])
# this the the cleaned dataframe
data3_cleaned <- data3[-which(data3$fasta.names %in% seq_name[index_list]),]
nrow(data3_cleaned) # number of sequences
length(unique(data3$species)) # how many species
table(data3$species) # how many paralogs per species
mean(table(data3$species)) # mean number of paralogs per species
# export
write.csv(data3_cleaned, "2023-04-28-orthologs-all-blast-prot-res-noNHE.csv")
write_fasta("2023-04-28-orthologs-all-blast-prot-res-noNHE.fasta", data3_cleaned)
setwd("/Users/pzito/Desktop/botany563-final/data/orthologs/CURATION4-add-outgroups")
# check that outgroups are not NHE
outgroups <- read_csv("orthologs-filtered-ALL+outgroups.csv")
# check that outgroups are not NHE
outgroups <- read.csv("orthologs-filtered-ALL+outgroups.csv")
library(dplyr)
library(stringr)
as_tibble(outgroups)
outgroups <- read.csv("outgroups-filtered.csv")
as_tibble(outgroups)
table(outgroups$species, outgroups$protein.accession)
# I'll check first that I have all the sequences from the blast searches
outgroups%>%filter(species == "Hypsibius exemplaris")%>%select(protein.accession)
outgroups$species
outgroups%>%filter(species == "Hypsibius exemplaris")%>%select(protein.accession)
outgroups%>%filter(species == "Ramazzottius varieornatus")%>%select(protein.accession)
as_tibble(outgroups)
outgroups%>%filter(species == "Ramazzottius varieornatus")%>%select(protein.accession)
# remove NHEs again
library(seqinr)
library(Biostrings)
remove_NHE <- function(df){
gap_open <- -10
gap_extent <- -1
index_list <- c()
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
GAU88122.1 <- readAAStringSet(file = "GAU88122.1.fasta")
seq_name = df$fasta.name
sequence = df$protein.sequence
for(i in 1:length(sequence)){
seq <- AAString(toupper(sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
} else if (NHE_score <= NHA_score & NHA_score < 0){
paste(seq_name[i], "passed the test, but it still did not align well with NHA")
}
}
df2 <- df[-which(df$fasta.names %in% seq_name[index_list]),]
print(df2)
return(df2)
}
remove_NHE(outgroups)
remove_NHE(outgroups)
outgroups_cleaned <- remove_NHE(outgroups)
# remove NHEs again
library(seqinr)
library(Biostrings)
remove_NHE <- function(df){
gap_open <- -10
gap_extent <- -1
index_list <- c()
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
GAU88122.1 <- readAAStringSet(file = "GAU88122.1.fasta")
seq_name = df$protein.accession
sequence = df$protein.sequence
for(i in 1:length(sequence)){
seq <- AAString(toupper(sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
} else if (NHE_score <= NHA_score & NHA_score < 0){
paste(seq_name[i], "passed the test, but it still did not align well with NHA")
}
}
df2 <- df[-which(df$protein.accession %in% seq_name[index_list]),]
print(df2)
return(df2)
}
outgroups_cleaned <- remove_NHE(outgroups)
# then manually check GAU88122.1
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
GAU88122.1 <- readAAStringSet(file = "GAU88122.1.fasta")
NHE_score <- pairwiseAlignment(DmelNHE3, GAU88122.1, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHE_score <- pairwiseAlignment(DmelNHE3, GAU88122.1, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -1, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, GAU88122.1, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -1, scoreOnly = TRUE)
NHE_score >= NHA_score
NHE_score
NHA_score
list.files()
?pairwiseAlignment
?MultipleAlignment
install.packages("msa")
write_fasta <- function(out_name, df){
sink(out_name)
for (i in 1:nrow(df)){
cat(df$fasta.names[i])
cat("\n")
cat(df$protein.sequence[i])
cat("\n")
}
sink()
}
fasta.names <- c()
for(i in 1:nrow(data3)){
species.name <- str_replace(data3[i, "species"], " ", "-")
partial.name <- paste(species.name, data3[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
fasta.names <- append(fasta.names, fasta.name)
}
library(dplyr)
setwd("/Users/pzito/Desktop/botany563-final/data/orthologs/CURATION4-add-outgroups")
outgroups <- read.csv("outgroups-filtered.csv") # Eaff as the
as_tibble(outgroups)
# these are the proteins that showed up on the EaffNHA7 blast search
outgroups%>%filter(species == "Hypsibius exemplaris")%>%select(protein.accession)
outgroups%>%filter(species == "Ramazzottius varieornatus")%>%select(protein.accession)
# remove NHEs again
library(seqinr)
library(Biostrings)
remove_NHE <- function(df){
gap_open <- -10
gap_extent <- -1
index_list <- c()
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
GAU88122.1 <- readAAStringSet(file = "GAU88122.1.fasta")
seq_name = df$protein.accession
sequence = df$protein.sequence
for(i in 1:length(sequence)){
seq <- AAString(toupper(sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
} else if (NHE_score <= NHA_score & NHA_score < 0){
paste(seq_name[i], "passed the test, but it still did not align well with NHA")
}
}
df2 <- df[-which(df$protein.accession %in% seq_name[index_list]),]
print(df2)
return(df2)
}
outgroups_cleaned <- remove_NHE(outgroups)
outgroups_cleaned <- remove_NHE(outgroups)
# remove NHEs again
library(seqinr)
library(Biostrings)
remove_NHE <- function(df){
gap_open <- -10
gap_extent <- -1
index_list <- c()
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
GAU88122.1 <- readAAStringSet(file = "GAU88122.1.fasta")
seq_name = df$protein.accession
sequence = df$protein.sequence
for(i in 1:length(sequence)){
seq <- AAString(toupper(sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
} else if (NHE_score <= NHA_score & NHA_score < 0){
paste(seq_name[i], "passed the test, but it still did not align well with NHA")
}
}
df2 <- df[-which(df$protein.accession %in% seq_name[index_list]),]
print(df2)
return(df2)
}
# outgroups_cleaned <- remove_NHE(outgroups)
# then manually check GAU88122.1
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
GAU88122.1 <- readAAStringSet(file = "GAU88122.1.fasta")
NHE_score <- pairwiseAlignment(DmelNHE3, GAU88122.1, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -1, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, GAU88122.1, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -1, scoreOnly = TRUE)
NHE_score >= NHA_score
write_fasta <- function(out_name, df){
sink(out_name)
for (i in 1:nrow(df)){
cat(df$fasta.names[i])
cat("\n")
cat(df$protein.sequence[i])
cat("\n")
}
sink()
}
fasta.names <- c()
for(i in 1:nrow(outgroups_cleaned)){
species.name <- str_replace(data3[outgroups_cleaned, "species"], " ", "-")
partial.name <- paste(species.name, outgroups_cleaned[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
fasta.names <- append(fasta.names, fasta.name)
}
fasta.names <- c()
for(i in 1:nrow(outgroups)){
species.name <- str_replace(outgroups[outgroups, "species"], " ", "-")
partial.name <- paste(species.name, outgroups_cleaned[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
fasta.names <- append(fasta.names, fasta.name)
}
fasta.names <- c()
for(i in 1:nrow(outgroups)){
species.name <- str_replace(outgroups[outgroups, "species"], " ", "-")
partial.name <- paste(species.name, outgroups_cleaned[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
print(fasta.name)
fasta.names <- append(fasta.names, fasta.name)
}
for(i in 1:nrow(outgroups)){
species.name <- str_replace(outgroups[outgroups, "species"], " ", "-")
partial.name <- paste(species.name, outgroups[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
print(fasta.name)
fasta.names <- append(fasta.names, fasta.name)
}
fasta.names <- c()
for(i in 1:nrow(outgroups)){
species.name <- str_replace(outgroups[i, "species"], " ", "-")
partial.name <- paste(species.name, outgroups[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
print(fasta.name)
fasta.names <- append(fasta.names, fasta.name)
}
outgroups <- cbind(outgroups, fasta.names)
write_fasta("outgroups.fasta", outgroups)
# remove the duplicate
outgroups <- outgroups[which(outgroups$protein.accession %in% unique(outgroups$protein.accession)),]
write_fasta("outgroups.fasta", outgroups)
outgroups
outgroups$species
outgroups$protein.accession
unique(outgroups$protein.accession)
# remove the duplicate
outgroups <- outgroups[which(outgroups$protein.accession %in% unique(outgroups$protein.accession)),]
# remove the duplicate
outgroups$protein.accession
length(outgroups$protein.accession)
library(dplyr)
setwd("/Users/pzito/Desktop/botany563-final/data/orthologs/CURATION4-add-outgroups")
outgroups <- read.csv("outgroups-filtered.csv") # Eaff as the
as_tibble(outgroups)
# these are the proteins that showed up on the EaffNHA7 blast search
outgroups%>%filter(species == "Hypsibius exemplaris")%>%select(protein.accession)
outgroups%>%filter(species == "Ramazzottius varieornatus")%>%select(protein.accession)
# remove NHEs again
library(seqinr)
library(Biostrings)
remove_NHE <- function(df){
gap_open <- -10
gap_extent <- -1
index_list <- c()
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
GAU88122.1 <- readAAStringSet(file = "GAU88122.1.fasta")
seq_name = df$protein.accession
sequence = df$protein.sequence
for(i in 1:length(sequence)){
seq <- AAString(toupper(sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
} else if (NHE_score <= NHA_score & NHA_score < 0){
paste(seq_name[i], "passed the test, but it still did not align well with NHA")
}
}
df2 <- df[-which(df$protein.accession %in% seq_name[index_list]),]
print(df2)
return(df2)
}
# outgroups_cleaned <- remove_NHE(outgroups)
# then manually check GAU88122.1
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
GAU88122.1 <- readAAStringSet(file = "GAU88122.1.fasta")
NHE_score <- pairwiseAlignment(DmelNHE3, GAU88122.1, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -1, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, GAU88122.1, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -1, scoreOnly = TRUE)
NHE_score >= NHA_score
write_fasta <- function(out_name, df){
sink(out_name)
for (i in 1:nrow(df)){
cat(df$fasta.names[i])
cat("\n")
cat(df$protein.sequence[i])
cat("\n")
}
sink()
}
fasta.names <- c()
for(i in 1:nrow(outgroups)){
species.name <- str_replace(outgroups[i, "species"], " ", "-")
partial.name <- paste(species.name, outgroups[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
print(fasta.name)
fasta.names <- append(fasta.names, fasta.name)
}
outgroups <- cbind(outgroups, fasta.names)
write_fasta("outgroups.fasta", outgroups)
list.files()
setwd("/Users/pzito/Desktop/botany563-final/data/orthologs/CURATION4-add-outgroups")
list.files()
out_aln <- read.alignment("outgroups.aln")
?read.alignment
out_aln <- read.alignment("outgroups.aln", format = clustal)
out_aln <- read.alignment("outgroups.aln", format = "clustal")
out_aln
out_aln$seq
?dist.alignment
dist_matrix <- dist.alignment(out_aln)
dist_matrix
out_tree <- nj(dist_matrix)
library(ape)
out_tree <- nj(dist_matrix)
out_tree
plot.phylo(out_tree)
outgroups%>%filter(species == "Ramazzottius varieornatus")%>%select(protein.accession)
ultra_conserved <- read.csv("orthologs-filtered-NHEless-manual_added+outgroups.csv")
as_tibble(ultra_conserved)
ultra_conserved%>%filter(type == "tardigrade")
ultra_conserved%>%filter(type == "tardigrade")%>%select(protein.accession)
table(ultra_conserved$type) # number of types
crustacean2
# all crustacean species
crustacean <- ultra_conserved%>%filter(type=="barnacle"|type=="copepod"|type=="shrimp")%>%select(species)
table(crustacean)
nrow(unique(crustacean))
nrow(ultra_conserved) # number of sequences
table(ultra_conserved$type) # number of types
length(unique(ultra_conserved$species)) # how many species
table(ultra_conserved$species) # how many paralogs per species
mean(table(ultra_conserved$species)) # mean number of paralogs
# all crustacean species
crustacean <- ultra_conserved%>%filter(type=="barnacle"|type=="copepod"|type=="shrimp")%>%select(species)
table(crustacean)
nrow(unique(crustacean))
# all chelicerate species
chelicerate <- ultra_conserved%>%filter(type=="spider"|type=="tick")%>%select(species)
chelicerate
nrow(unique(chelicerate))
# all hexapod species
hexapod <- ultra_conserved%>%filter(type=="cockroach"|type=="diptera"|type=="ephemera"|type=="hemiptera"|type=="hymenoptera"|type=="lepidoptera"|type=="thysanoptera")%>%select(species)
table(hexapod)
nrow(unique(hexapod))
table(ultra_conserved%>%filter(type=="cockroach"|type=="diptera"|type=="ephemera"|type=="hemiptera"|type=="hymenoptera"|type=="lepidoptera"|type=="thysanoptera")%>%distinct(species, type)%>%select(type))
length(unique(hexapod))
relaxed <- read_csv("orthologs-filtered-ALL+outgroups.csv")
relaxed <- read.csv("orthologs-filtered-ALL+outgroups.csv")
fasta.names <- c()
for(i in 1:nrow(relaxed)){
species.name <- str_replace(relaxed[i, "species"], " ", "-")
partial.name <- paste(species.name, relaxed[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
print(fasta.name)
fasta.names <- append(fasta.names, fasta.name)
}
outgroups <- cbind(relaxed, fasta.names)
fasta.names <- c()
for(i in 1:nrow(relaxed)){
species.name <- str_replace(relaxed[i, "species"], " ", "-")
partial.name <- paste(species.name, relaxed[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
fasta.names <- append(fasta.names, fasta.name)
}
outgroups <- cbind(relaxed, fasta.names)
write_fasta("orthologs-filtered-ALL+outgroups.fasta", relaxed)
write_fasta("orthologs-filtered-NHEless-manual_added+outgroups.csv", ultra_conserved)
ultra_conserved%>%filter(type == "tardigrade")%>%select(protein.accession)
ultra_conserved <- read.csv("orthologs-filtered-NHEless-manual_added+outgroups.csv")
as_tibble(ultra_conserved)
ultra_conserved%>%filter(type == "tardigrade")%>%select(protein.accession)
ultra_conserved
fasta.names <- c()
for(i in 1:nrow(relaxed)){
species.name <- str_replace(relaxed[i, "species"], " ", "-")
partial.name <- paste(species.name, relaxed[i, "protein.accession"], sep = "-")
fasta.name <- paste(">", partial.name, sep = "")
fasta.names <- append(fasta.names, fasta.name)
}
relaxed <- cbind(relaxed, fasta.names)
write_fasta("orthologs-filtered-ALL+outgroups.fasta", relaxed)
write_fasta("orthologs-filtered-CONSERVED+outgroups.fasta", ultra_conserved)
write_fasta("orthologs-filtered-CONSERVED+outgroups.fasta", ultra_conserved)
colnames(ultra_conserved)
ultra_conserved
ultra_conserved <- read.csv("orthologs-filtered-CONSERVED+outgroups.csv")
as_tibble(ultra_conserved)
write_fasta("orthologs-filtered-CONSERVED+outgroups.fasta", ultra_conserved)
