str_split_1(str3, pattern = "")
|
str_split_1(str3, pattern = "|")
str_match(str3,"|\\s*(.*?)\\s*|")
?gsub
gsub(".*STR1 (.+) STR2.*", "\\1", str3)
gsub(".*| (.+) |.*", "\\1", str3)
str_match(str3,"|\\s*(.*?)\\s*|")
str_match(str3,"|\\s*(.*?)\\s*|")[1,2]
res <- str_match(a, "|\\s*(.*?)\\s*|")
res <- str_match(str3, "|\\s*(.*?)\\s*|")
res
str3
?str_extract_all
str_extract_all(str3, pattern = "|")
str_extract_all(str3, pattern = "|", group = NULL)
str_extract,(str3, pattern = "|")
str_extract(str3, pattern = "|")
str3
str_extract(str3, pattern = "|")
str_extract(str3, pattern = "e")
str_extract(str3, pattern = "(?<=|).+(?=|)")
str_extract(str3, pattern = "(?<=|).+(?=|)")
str3
str_split_1(query[1], pattern = " ")[3]
str_split_1(query[1], pattern = " ")[3]
str_split_1(query[1], pattern = " ")
str_split_1(query[1], pattern = " ")[3]
str_split_1(str3, pattern = "")[3]
str_split_1(str3, pattern = "")
str_split_1(str3 , pattern = "")
str_split_1(str3, pattern = "|")
paste("|", str3, "|")
paste("|", str3, "|", sep = "")
str4 <- paste("|", str3, "|", sep = "")
str_split_1(str4, pattern = "|")
str_split_1(str4, pattern = "|")
?str_split
str_split_1(str4)
str_split_1(str4, pattern = "")
str_split_1(str4, pattern = "|")
query[1]
# have to do a for loop bc str_split doesn't work on concatenated strings, also there is no pattern
str_split(query, pattern = "")
# have to do a for loop bc str_split doesn't work on concatenated strings, also there is no pattern
str_split(query[1], pattern = "")
# have to do a for loop bc str_split doesn't work on concatenated strings, also there is no pattern
str_split_1(query[1], pattern = "")
# have to do a for loop bc str_split doesn't work on concatenated strings, also there is no pattern
str <- str_split_1(query[1], pattern = "")
str
for(i in 1:length(str)){
if(start == FALSE){
if(i == "|"){
start = TRUE
}
}else if(start == TRUE){
print(i)
} else if(i == "|"){
start = FALSE
}
}
start <- FALSE
for(i in 1:length(str)){
if(start == FALSE){
if(i == "|"){
start = TRUE
}
}else if(start == TRUE){
print(i)
} else if(i == "|"){
start = FALSE
}
}
start <- FALSE
for(i in 1:length(str)){
if(start == FALSE){
if(str(i) == "|"){
start = TRUE
}
}else if(start == TRUE){
print(str(i))
} else if(str(i) == "|"){
start = FALSE
}
}
str
for(i in 1:length(str)){
print(i)
if(start == FALSE){
if(str(i) == "|"){
start = TRUE
}
}else if(start == TRUE){
print(str(i))
} else if(str(i) == "|"){
start = FALSE
}
}
str(i)
str(1)
start <- FALSE
for(i in 1:length(str)){
print(i)
if(start == FALSE){
if(str[i] == "|"){
start = TRUE
}
}else if(start == TRUE){
print(str[i])
} else if(str[i] == "|"){
start = FALSE
}
}
acc <- str()
str
acc <- str("")
start <- FALSE
for(i in 1:length(str)){
print(i)
if(start == FALSE){
if(str[i] == "|"){
start = TRUE
}
}else if(start == TRUE){
acc <- paste(acc, str(i), sep = "")
} else if(str[i] == "|"){
start = FALSE
}
}
acc
start <- FALSE
for(i in 1:length(str)){
if(start == FALSE){
if(str[i] == "|"){
start = TRUE
}
}else if(start == TRUE){
acc <- paste(acc, str(i), sep = "")
} else if(str[i] == "|"){
start = FALSE
}
}
start <- FALSE
for(i in 1:length(str)){
if(start == FALSE){
if(str[i] == "|"){
start = TRUE
}
} else if(start == TRUE){
print(str[i])
} else if(str[i] == "|"){
start = FALSE
}
}
acc <- str("")
start <- FALSE
for(i in 1:length(str)){
if(start == FALSE){
if(str[i] == "|"){
start = TRUE
}
} else if(start == TRUE & str[i] != "|"){
print(str[i])
} else if(str[i] == "|"){
start = FALSE
}
}
acc <- str("")
start <- FALSE
for(i in 1:length(str)){
if(start == FALSE){
if(str[i] == "|"){
start = TRUE
}
} else if(start == TRUE & str[i] != "|"){
acc <- paste(acc, str[i])
} else if(str[i] == "|"){
start = FALSE
}
}
acc
acc <- str("")
start <- FALSE
for(i in 1:length(str)){
if(start == FALSE){
if(str[i] == "|"){
start = TRUE
}
} else if(start == TRUE & str[i] != "|"){
acc <- paste(acc, str[i], sep = "")
} else if(str[i] == "|"){
start = FALSE
}
}
acc
str
str
get_acc <- function(table){
# input is the Hittable from the batch-CD
# output is a vector containing just the accession numbers
out <- c()
query <- table$Query # this is the column that contains the og acc numbers
for(i in 1:length(query)){
str <- str_split_1(query[i], pattern = "") # extract full string
# now get only the accession number
acc <- str("")
start <- FALSE
for(j in 1:length(str)){
if(start == FALSE){
if(str[j] == "|")
start = TRUE
} else if(start == TRUE & str[j] != "|"){
acc <- paste(acc, str[j], sep = "")
} else if(str[j] == "|"){
start = FALSE
}
}
out <- append(out, acc)
}
return(out)
}
get_acc(nha_good)
accession.numbers <- get_acc(nha_good)
length(accession.numbers)
nrow(nha_good)
get_acc <- function(table){
# input is the Hittable from the batch-CD
# output is a vector containing just the accession numbers
out <- c()
query <- table$Query # this is the column that contains the og acc numbers
for(i in 1:length(query)){
str <- str_split_1(query[i], pattern = "") # extract full string
# now get only the accession number
acc <- str("")
start <- FALSE
for(j in 1:length(str)){
if(str_detect(str[j],"[[:upper:]]")){
if(str_detect(str[j+1], "[[:upper:]]") & str_detect(str[j+2], "[[:upper:]]")){
acc <- paste(acc, str[j:j+2], sep = "")
}
} if(is.numeric(str[j])){
get_acc <- function(table){
# input is the Hittable from the batch-CD
# output is a vector containing just the accession numbers
out <- c()
query <- table$Query # this is the column that contains the og acc numbers
for(i in 1:length(query)){
str <- str_split_1(query[i], pattern = "") # extract full string
# now get only the accession number
acc <- str("")
start <- FALSE
for(j in 1:length(str)){
if(str_detect(str[j],"[[:upper:]]")){
} if(str_detect(str[j+1], "[[:upper:]]") & str_detect(str[j+2], "[[:upper:]]")){
get_acc <- function(table){
# input is the Hittable from the batch-CD
# output is a vector containing just the accession numbers
out <- c()
query <- table$Query # this is the column that contains the og acc numbers
for(i in 1:length(query)){
str <- str_split_1(query[i], pattern = "") # extract full string
# now get only the accession number
acc <- str("")
start <- FALSE
for(j in 1:length(str)){
if(str_detect(str[j],"[[:upper:]]")){
} else if(str_detect(str[j+1], "[[:upper:]]") & str_detect(str[j+2], "[[:upper:]]")){
acc <- paste(acc, str[j:j+2], sep = "")
}
} else if(is.numeric(str[j])){
is_upper <- function(str){
return(str_detect(str, "[[:upper:]]"))
}
is_upper("A")
is_upper("a")
get_acc <- function(table){
# input is the Hittable from the batch-CD
# output is a vector containing just the accession numbers
out <- c()
query <- table$Query # this is the column that contains the og acc numbers
for(i in 1:length(query)){
str <- str_split_1(query[i], pattern = "") # extract full string
# now get only the accession number
acc <- str("")
for(j in 1:length(str)){
if(is_upper(str[j]) & is_upper(str[j+1]) & is_upper(str[j+2])){
acc <- paste(acc, str[j:j+2], sep = "")
}
} else if(is.numeric(str[j])){
get_acc <- function(table){
# input is the Hittable from the batch-CD
# output is a vector containing just the accession numbers
out <- c()
query <- table$Query # this is the column that contains the og acc numbers
for(i in 1:length(query)){
str <- str_split_1(query[i], pattern = "") # extract full string
# now get only the accession number
acc <- str("")
for(j in 1:length(str)){
if(is_upper(str[j]) & is_upper(str[j+1]) & is_upper(str[j+2])){
acc <- paste(acc, str[j:j+2], sep = "")
} else if(is.numeric(str[j])){
acc <- paste(acc, str[j], sep = "")
} else if(str[j] == "."){
acc <- paste(acc, str[j:j+1], sep = "")
out <- append(out, acc)
break
}
}
}
return(out)
}
accession.numbers <- get_acc(nha_good)
length(accession.numbers)
nrow(nha_good)
head(accession.numbers)
accession.numbers
head(nha_good$Query)
query
str
for(i in 1:length(str)){
if(is_upper(str[i])){
print(i)
}
}
for(i in 1:length(str)){
if(is_upper(str[i])){
print(str[i])
}
}
str
for(i in 1:length(str)){
if(is_upper(str[i])){
print(str[i])
} else if(is.numeric(str[i])){
print(str[i])
}
}
is.numeric("1")
}])
is.numeric("0")
is_number <- function(str){
return(str_detect(str, "[0-9]"))
}
is_number("0")
is_number("0a")
is_number("75")
is_number("12486sdgsgf")
for(i in 1:length(str)){
if(is_upper(str[i])){
print(str[i])
} else if(is_number(str[i])){
print(str[i])
}
}
get_acc <- function(table){
# input is the Hittable from the batch-CD
# output is a vector containing just the accession numbers
out <- c()
query <- table$Query # this is the column that contains the og acc numbers
for(i in 1:length(query)){
str <- str_split_1(query[i], pattern = "") # extract full string
# now get only the accession number
acc <- str("")
for(j in 1:length(str)){
if(is_upper(str[j]) & is_upper(str[j+1]) & is_upper(str[j+2])){
acc <- paste(acc, str[j:j+2], sep = "")
} else if(is_number(str[j])){
acc <- paste(acc, str[j], sep = "")
} else if(str[j] == "."){
acc <- paste(acc, str[j:j+1], sep = "")
out <- append(out, acc)
break
}
}
}
return(out)
}
get_acc(nha_good)
is_upper(str)
str
for(i in 1:length(str)){
if(is_upper(str[i]) & is_upper(str[i+1] & is_upper(str[i+2]))){
print(str[i:i+2])
} else if(is_number(str[i])){
print(str[i])
}
}
for(i in 1:length(str)){
if(is_upper(str[i]) & is_upper(str[i+1]) & is_upper(str[i+2])){
print(str[i:i+2])
} else if(is_number(str[i])){
print(str[i])
}
}
is_upper(str)
str[is_upper(str)]
for(i in 1:length(str)){
if(is_upper(str[i]) & is_upper(str[i+1]) & is_upper(str[i+2])){
print(str[i:i+2])
}
}
is_number(str)
rle(is_upper(str))
rle(is_upper(str))$lengths
?cumsum
?rle
with(rle(is_upper)str, sum(lengths[values] >= 2))
with(rle(is_upper(str)), sum(lengths[values] >= 2))
where(rle(is_upper(str)))
?which(is_upper(str))
which(is_upper(str))
?grep
grep(c(TRUE, TRUE, TRUE), is_upper(str))
grep(TRUE, is_upper(str))
factor(is_upper(str), labels = c("Y", "N"))
is_upper(str)
factor(is_upper(str), labels = c("TRUE", "FALSE"))
factor(is_upper(str), labels = c("FALSE", "TRUE"))
?factor
as.character(is_upper(str))
?grep
chr_vec <- as.character(is_upper(str))
grep(c("TRUE", "TRUE", "TRUE"), chr_vec)
paste(chr_vec, sep = " ")
paste(chr_vec[1:length(chr_vec), sep = " "])
paste(chr_vec[1:length(chr_vec)], sep = " ")
paste("Aajfjsg", "akshdbskjdgbsg", "aojfhowethw")
paste(chr_vec, collapse = " ")
chr_vec <- paste(chr_vec, collapse = " ")
chr_vec
chr_vec[1]
chr_vec <- as.character(is_upper(str))
chr_vec
paste(chr_vec, collapse = " ")
a <- paste(chr_vec, collapse = " ")[1]
a
a <- paste(chr_vec, collapse = " ")[[1]]
a
a[[1]]
grep("TRUE TRUE TRUE", a)
stri_paste(chr_vec, collapse=' ')
?paste
paste(chr_vec, sep = " ")
paste(chr_vec, collapse = " ")
a <- paste(chr_vec, collapse = " ")
a[[[1]]]
a[[1]]
a[[1]][1]
a[[1]][2]
a <- paste(chr_vec, collapse = "")
a
a <- paste(chr_vec, collapse = " ")
a <- paste(chr_vec, collapse = " ")
a
grepl()
?grepl()
paste(as.character(is_upper(str)), collapse = " ")
paste("", as.character(is_upper(str)), collapse = " ")
paste(" ", as.character(is_upper(str)), collapse = " ")
paste("", as.character(is_upper(str)))
paste(as.character(is_upper(str)))
as.character(is_upper(str))
grep(as.character(is_upper(str)), c("TRUE", "TRUE"))
?str_extract()
a <- character(is_upper(str))
a
grep(a, c("TRUE", "TRUE"))
grep(a, c("TRUE", "TRUE", "TRUE"))
grep(a, c("TRUE TRUE TRUE"))
grep(a, "TRUE TRUE TRUE")
a
where(a == "TRUE TRUE TRUE")
which(a == "TRUE TRUE TRUE")
?grep
t <- "abcdef asgb apwtug"
grep("a", t)
grep("abcdef", t)
grep("asgb", t)
grep("TRUE TRUE TRUE", a)
?match
match("TRUE TRUE TRUE", a)
match(c("TRUE", "TRUE", "TRUE"), chr_vec)
chr_vec
match(c(TRUE, TRUE, TRUE), is_upper(str))
as.numeric(is_upper(str))
str
chr_vec
a
grep("TRUE TRUE", a)
grep("TRUE TRUE", a[[1]])
paste("Aasd", "akjfbaldfb", "afkbsg")
paste(c("Aasd", "akjfbaldfb", "afkbsg"))
as.character(is_upper(str))
paste(as.character(is_upper(str), collapse = " "))
paste(as.character(is_upper(str)), collapse = " ")
paste(as.character(is_upper(str)), collapse = "")
?match
grep("abc", "abcde abet absgt")
grep("a", "abcde abet absgt")
grep("a", c("abcde", "abet", "absgt"))
#### TESTING ####
query <- nha_good$Query
test <- query[1]
test
is.upper <- function(chr){
return(str_detect(chr,"[[:upper:]]"))
}
is.number <- function(chr){
return(str_dectec(chr, "[[:0-9:]]"))
}
