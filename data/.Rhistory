}
#out_name2 <- paste(Sys.Date(), "cds_sequence_orthologs.fasta", sep = "-")
size <- dim(new_fasta)[1]
for(i in 1:size){
seq <- paste(new_fasta$fasta_name[i], "\n", new_fasta$protein.sequence[i], "\n", "\n")
cat(seq)
}
#out_name2 <- paste(Sys.Date(), "cds_sequence_orthologs.fasta", sep = "-")
size <- dim(new_fasta)[1]
#out_name2 <- paste(Sys.Date(), "cds_sequence_orthologs.fasta", sep = "-")
size <- dim(data)[1]
for(i in 1:size){
seq <- paste(new_fasta$fasta_name[i], "\n", new_fasta$protein.sequence[i], "\n", "\n")
cat(seq)
}
for(i in 1:size){
seq <- paste(data$fasta_name[i], "\n", data$protein.sequence[i], "\n", "\n")
cat(seq)
}
sink()
sink()
for(i in 1:size){
seq <- paste(data$fasta_name[i], "\n", data$protein.sequence[i], "\n", "\n")
cat(seq)
}
sink()
sink(out_name1)
for(i in 1:size){
seq <- paste(data$fasta_name[i], "\n", data$protein.sequence[i], "\n", "\n")
cat(seq)
}
sink()
data <- read.csv("orthologs-filtered.csv", header = TRUE)
getwd()
setwd("/data")
# importing data
library(dplyr)
library(tidyverse)
data <- read.csv("orthologs-filtered.csv", header = TRUE)
getwd()
setwd("./data/")
ls
getwd()
data <- read.csv("orthologs-filtered.csv", header = TRUE)
as_tibble(data)
# get accession names and sequences
data <- data %>%
mutate(fasta_name = paste(">", species, "-", protein.accession, sep = "")) %>% # add fasta head name
select(fasta_name, protein.sequence) # select columns
data
data <- read.csv("orthologs-filtered.csv", header = TRUE)
as_tibble(data)
length(distinch(data$species))
length(distinct(data$species))
distinct(data$species)
dim(data%>%select(species)%>%distinct())
data%>%select(species)%>%distinct()
setwd("/Users/patriciazito/Desktop/botany563-final/data/")
library("seqinr")
library("Biostrings") # has to be installed through BiocManager
DmelNHE3 <- read.fasta(file = "DmelNHE3_prot.fasta")
DmelNHE3_seq <- AAStringSet(DmelNHE3[[1]])
DmelNHA2 <- read.fasta(file = "DmelNHA2_prot.fasta")
DmelNHA2_seq <- AAStringSet(DmelNHA2[[1]])
all_filt_ortholgs <- read.fasta(file = "2023-03-12-protein_sequence_orthologs.fasta") # this data has already been curated according to BLAST e-values for NHA and genome assembly quality
list.files()
all_filt_ortholgs <- read.fasta(file = "2023-03-12-protein_sequence_orthologs.fasta") # this data has already been curated according to BLAST e-values for NHA and genome assembly quality
test <- pairwiseAlignment(DmelNHE3_seq, DmelNHA2_seq, substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4, scoreOnly = FALSE)
type(DmelNHE3_seq)
type(DmelNHE3[[1]])
length(DmelNHE3_seq)
length(DmelNHA2_seq)
?pairwiseAlignment
test <- pairwiseAlignment(DmelNHE3_seq, DmelNHA2_seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4, scoreOnly = FALSE)
s1 <-
DNAString("ACTTCACCAGCTCCCTGGCGGTAAGTTGATCAAAGGAAACGCAAAGTTTTCAAG")
s2 <-
DNAString("GTTTCACTACTTCCTTTCGGGTAAGTAAATATATAAATATATAAAAATATAATTTTCATC")
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -3, baseOnly = TRUE)
globalAlign <- pairwiseAlignment(s1, s2, substitutionMatrix = mat, gapOpeningg = 5, gapExtension = 2)
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -3, baseOnly = TRUE)
globalAlign <- pairwiseAlignment(s1, s2, substitutionMatrix = mat, gapOpeningg = 5, gapExtension = 2)
globalAlign <- pairwiseAlignment(s1, s2, substitutionMatrix = mat, gapOpening = 5, gapExtension = 2)
globalAlign
pairwiseAlignment(AAString("PAWHEAE"), AAString("HEAGAWGHEE"),
substitutionMatrix = "BLOSUM50",
gapOpening = 0, gapExtension = 8)
DmelNHE3_seq <- AAString(DmelNHE3[[1]])
s1 <- DNAString("ACTTCACCAGCTCCCTGGCGGTAAGTTGATCAAAGGAAACGCAAAGTTTTCAAG")
s2 <- DNAString("GTTTCACTACTTCCTTTCGGGTAAGTAAATATATAAATATATAAAAATATAATTTTCATC")
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -3, baseOnly = TRUE)
globalAlign <- pairwiseAlignment(s1, s2, substitutionMatrix = mat, gapOpening = 5, gapExtension = 2)
globalAlign
globalAlignAA <- pairwiseAlignment(AAString("PAWHEAE"), AAString("HEAGAWGHEE"),
substitutionMatrix = "BLOSUM50",
gapOpening = 0, gapExtension = 8)
globalAlignAA
type(DmelNHA2)
type(DmelNHA2[[1]])
type(DmelNHA2[1)
type(DmelNHA2[1])
summary(DmelNHA2_seq)
DmelNHA2_seq
str(DmelNHA2_seq)
str(DmelNHA2)
str(DmelNHA2$NP_001247251.1)
test <- pairwiseAlignment(DmelNHE3_seq, DmelNHA2_seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4, scoreOnly = FALSE)
DmelNHE3_seq
DmelNHE3[[1]]
test <- pairwiseAlignment(DmelNHE3[[1]], DmelNHA2_seq[[1]], type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4, scoreOnly = FALSE)
DmelNHE3[[1]]
DmelNHE3[[[1]]]
str(DmelNHE[[1]])
str(DmelNHE3[[1]])
DmelNHE <- AAString(read.fasta(file = "DmelNHE3_prot.fasta"))
DmelNHE <- AAString("DmelNHE3_prot.fasta"
)
DmelNHE
?readAAStringSet
readAAStringSet("DmelNHE3_prot.fasta")
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
test <- pairwiseAlignment(DmelNHE3, DmelNHA2_seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4, scoreOnly = FALSE)
test <- pairwiseAlignment(DmelNHE3, DmelNHA2, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4, scoreOnly = FALSE)
test
readAAStringSet(file = "2023-03-12-protein_sequence_orthologs+DmelNHE3.fasta")
data <- read.fasta(file = "2023-03-12-protein_sequence_orthologs.fasta")
test
test[3]
type(test)
?pairwiseAlignment
test <- pairwiseAlignment(DmelNHE3, DmelNHA2, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4, scoreOnly = TRUE)
test
setwd("/Users/patriciazito/Desktop/botany563-final/data/")
library("seqinr")
library("Biostrings") # has to be installed through BiocManager
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHE3_seq <- AAStringSet(DmelNHE3[[1]])
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
DmelNHA2_seq <- AAStringSet(DmelNHA2[[1]])
data <- read.fasta(file = "2023-03-12-protein_sequence_orthologs+DmelNHE3.fasta")
# this data has already been curated according to BLAST e-values for NHA and genome assembly quality
# right now it's inside the data folder, but once this script is done running I'll put it under ./orthologs/CURATION1
setwd("/Users/patriciazito/Desktop/botany563-final/data/")
library("seqinr")
library("Biostrings") # has to be installed through BiocManager
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
data <- readAAStringSet(file = "2023-03-12-protein_sequence_orthologs+DmelNHE3.fasta")
# this data has already been curated according to BLAST e-values for NHA and genome assembly quality
# right now it's inside the data folder, but once this script is done running I'll put it under ./orthologs/CURATION1
globalAlignAA <- pairwiseAlignment(AAString("PAWHEAE"), AAString("HEAGAWGHEE"),
substitutionMatrix = "BLOSUM50",
gapOpening = 0, gapExtension = 8)
globalAlignAA
DmelNHA2
gap_open <- -10
gap_extent <- -4
index_list <- c() # save indexes where NHE score is higher than NHA
for(i in 1:length(data)){
seq <- data[i]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
append(index_list, i)
}
}
pairwiseAlignment(DmelNHE3, seq[1], substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtenstion = gap_extent)
pairwiseAlignment(DmelNHE3, seq[1], substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtenstion = -4)
pairwiseAlignment(DmelNHE3, seq[1], substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4)
data[1]
data[1]$DmelNHA2
data[[1]]
type(data[1])
type(data[[1]])
type(data[2])
data[2]
data[2][1]
seq <- data[[1]]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHE_score
gap_open <- -10
gap_extent <- -4
index_list <- c() # save indexes where NHE score is higher than NHA
for(i in 1:length(data)){
seq <- data[i][1]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
append(index_list, i)
}
}
seq <- data[2][1]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHE_score
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent)
NHE_score
for(i in 1:length(data)){
seq <- data[i][1]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score => NHA_score){
for(i in 1:length(data)){
seq <- data[i][1]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
append(index_list, i)
}
}
t <- c(1, 2, 5, "a", "b")
length(t)
1:length(t)){
for(i in 1:length(t)){
print(i)
}
append("0", t)
t
append("5", t)
t
for(i in 1:length(data)){
seq <- data[i][1]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
data <- readAAStringSet(file = "2023-03-12-protein_sequence_orthologs+DmelNHE3.fasta")
for(i in 1:length(data)){
seq <- data[i][1]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
seq <- data[5][1]
pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
seq
DmelNHE3
pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
seq <- data[3][1]
seq
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
data[3]
data[3][1]
data[3][1]$`N.striatum-KAG1663790.1 `
seq <- data[3][1]$`N.striatum-KAG1663790.1 `
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
data[3][1]$`N.striatum-KAG1663790.1[1]
]
)
data[3][1]$`N.striatum-KAG1663790.1 `[1]
setwd("/Users/patriciazito/Desktop/botany563-final/data/")
library("seqinr")
library("Biostrings") # has to be installed through BiocManager
DmelNHE3 <- readAAStringSet(file = "DmelNHE3_prot.fasta")
DmelNHA2 <- readAAStringSet(file = "DmelNHA2_prot.fasta")
data <- readAAStringSet(file = "2023-03-12-protein_sequence_orthologs+DmelNHE3.fasta")
# this data has already been curated according to BLAST e-values for NHA and genome assembly quality
# right now it's inside the data folder, but once this script is done running I'll put it under ./orthologs/CURATION1
s1 <- DNAString("ACTTCACCAGCTCCCTGGCGGTAAGTTGATCAAAGGAAACGCAAAGTTTTCAAG")
s2 <- DNAString("GTTTCACTACTTCCTTTCGGGTAAGTAAATATATAAATATATAAAAATATAATTTTCATC")
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -3, baseOnly = TRUE)
globalAlign <- pairwiseAlignment(s1, s2, substitutionMatrix = mat, gapOpening = 5, gapExtension = 2)
globalAlign
globalAlignAA <- pairwiseAlignment(AAString("PAWHEAE"), AAString("HEAGAWGHEE"),
substitutionMatrix = "BLOSUM50",
gapOpening = 0, gapExtension = 8)
globalAlignAA
test <- pairwiseAlignment(DmelNHE3, DmelNHA2, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4, scoreOnly = TRUE)
test
gap_open <- -10
gap_extent <- -4
index_list <- c() # save indexes where NHE score is higher than NHA
for(i in 1:length(data)){
seq <- data[i][1]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
for(i in 1:length(data)){
seq <- data[i][1]
print(seq)
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
pairwiseAlignment(AAString(tolower("PAWHEAE")), AAString("HEAGAWGHEE"),
substitutionMatrix = "BLOSUM50",
gapOpening = 0, gapExtension = 8)
pairwiseAlignment(AAString(tolower("PAWHEAE")), tolower("HEAGAWGHEE"),
substitutionMatrix = "BLOSUM50",
gapOpening = 0, gapExtension = 8)
pairwiseAlignment(AAString(tolower("PAWHEAE")), AAString(tolower("HEAGAWGHEE")),
substitutionMatrix = "BLOSUM50",
gapOpening = 0, gapExtension = 8)
toupper(seq)
for(i in 1:length(data)){
seq <- toupper(data[i][1])
print(seq)
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
gsub(" ", "", seq)
for(i in 1:length(data)){
seq <- gsub(toupper(data[i][1]))
print(seq)
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
data <- readAAStringSet(file = "2023-03-12-protein_sequence_orthologs+DmelNHE3_UPPERCASE.fasta")
data[1]
data[4]
data[4][1]
data[4][1][-1]
for(i in 1:length(data)){
seq <- gsub(toupper(data[i][1]))
print(seq)
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
for(i in 1:5){
seq <- gsub(toupper(data[i][1]))
print(seq)
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
paste(NHE_score, NHA_score)
#if(NHE_score >= NHA_score){
#index_list <- append(index_list, i)
}
for(i in 1:2){
seq <- gsub(toupper(data[i][1]))
print(seq)
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
paste(NHE_score, NHA_score)
#if(NHE_score >= NHA_score){
#index_list <- append(index_list, i)
}
for(i in 1:data[5]){
seq <- gsub(toupper(data[i][1]))
print(seq)
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
paste(NHE_score, NHA_score)
#if(NHE_score >= NHA_score){
#index_list <- append(index_list, i)
}
1:5
for(i in 1:5){
seq <- gsub(toupper(data[i][1]))
print(seq)
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
paste(NHE_score, NHA_score)
#if(NHE_score >= NHA_score){
#index_list <- append(index_list, i)
}
for(i in 1:length(data)){
seq <- data[i][1]
print(seq)
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
pairwiseAlignment(data[3][1], data[4][1], substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4)
?align_pairwiseAlignment
?`alignedSubject,PairwiseAlignments-method`''
pairwiseAlignment(data[3][1], data[2][1], substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4)
pairwiseAlignment(data[3][1], data[3][1], substitutionMatrix = "BLOSUM50", gapOpening = -10, gapExtension = -4)
seq <- AAString("MKIRLQVDKVQMKESKMGECDEKSNKNIVGEEMKPLNPDNDEQTDVISSNTIPITGALEEVKFSEKCRSRQSKMKCLCCQHDSGSVNNFNFVIEKLYLCEIMCVILLWMSLYSIIGCQLLPEGHLFALFILIVCCIIGGNLISLLHFPPLLGMLVVGFLLRNVPHINVAANLNPQWASALRSIALVVILIRAGLGLDPQALKQLSLVCLRLAFTPCLVETIVVAVSSHLVLGLPWLWGFMLGFVLSAVSPAVVVPSMISIQEKGLGCAKGIPTLIIAAASVDDVLAISGFGIVLGITFTEGSLGWTIAKGPIEVLIGLAYGIFLGVTLWVIPYRSKENKYIYRFLLLSTGGTVAVFGSRIASFGGAGALGCLILSFVAAVGWKKEDINESDQVAHIFANLWYFFQPILFGLIGAEITVDNLDASTVGYGIAVLSIGLFFRIIASFFVVLGAGLTMKERLFIALAWLPKATVQAAIGPVALDLARAQADKELEHYGLQVLTISVLVILITAPIGAAAIALSAPKLLTPQREASNDEEKSV")
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHE_score
NHA_score
data[3][1]
data[3][1] == seq
data[3][1][1] == seq[1]
data[3][1]
seq
read.fasta("2023-03-12-protein_sequence_orthologs+DmelNHE3_UPPERCASE.fasta")
test <- read.fasta("2023-03-12-protein_sequence_orthologs+DmelNHE3_UPPERCASE.fasta")
test[1]
test[3]
AAString(test[1])
test <- read.fasta("2023-03-12-protein_sequence_orthologs+DmelNHE3_UPPERCASE.fasta", seqtype = "AA")
test[1]
?read.fasta
test <- read.fasta("2023-03-12-protein_sequence_orthologs+DmelNHE3_UPPERCASE.fasta", seqtype = "AA", as.string = TRUE)
test[1]
test[1][2]
test[1][1]
test[1][1][1]
seq_name = names(data)
sequence = paste(data)
seq_name
sequence
for(i in 1:length(sequence)){
seq <- sequence[i]
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
seq[3]
seq[1]
seq[2]
sequence[1]
sequence[3]
for(i in 1:length(sequence)){
seq <- AAString(gsub(sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
AAString(gsub(sequence[3]))
sequence[3]
gsub(sequence[3])
seq <- AAString(gsub(" ", "", sequence[3]))
seq
for(i in 1:length(sequence)){
seq <- AAString(gsub(" ", "", sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
index_list
unique(index_list)
index_list <- c() # save indexes where NHE score is higher than NHA
for(i in 1:length(sequence)){
seq <- AAString(gsub(" ", "", sequence[i]))
NHE_score <- pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
NHA_score <- pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
if(NHE_score >= NHA_score){
index_list <- append(index_list, i)
}
}
seq_name[index_list]
bad_seqs <- sequences[index_list]
bad_seq_names <- seq_names[index_list]
bad_seqs <- sequence[index_list]
bad_seq_names <- seq_names[index_list]
bad_seq_names <- seq_name[index_list]
bad_seqs <- sequence[index_list]
bad_seq_names <- seq_name[index_list]
for(i in 1:lenght(bad_seqs)){
print(bad_seq_names[i])
seq <- AAString(gsub(" ", "", bad_seqs[i]))
pairwiseAlignment(DmelNHE3, , type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
}
for(i in 1:length(bad_seqs)){
print(bad_seq_names[i])
seq <- AAString(gsub(" ", "", bad_seqs[i]))
pairwiseAlignment(DmelNHE3, , type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
}
bad_seqs[i]
bad_seqs[1]
bad_seqs[2]
seq <- AAString(gsub(" ", "", bad_seqs[2]))
bad_seqs <- sequence[index_list]
bad_seq_names <- seq_name[index_list]
for(i in 1:length(bad_seqs)){
print(bad_seq_names[i])
seq <- AAString(gsub(" ", "", bad_seqs[i]))
pairwiseAlignment(DmelNHE3, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
pairwiseAlignment(DmelNHA2, seq, type = "global", substitutionMatrix = "BLOSUM50", gapOpening = gap_open, gapExtension = gap_extent, scoreOnly = TRUE)
}
73-24
length(sequences(-index_list))
length(sequence(-index_list))
length(sequence[-index_list])
length(sequence)
length(index_list)
83-27
seq_name[1]
seq_name[3]
?split()
strsplit(seq_name[3])
strsplit(seq_name[3], "-")
strsplit(seq_name[3], "-")[1]
strsplit(seq_name[3], "-")[[1]
]
strsplit(seq_name[3], "-")[[[1]]
strsplit(seq_name[3], "-")[[1]][1]
strsplit(seq_name[3], "-")[[[1]]]
strsplit(seq_name, "-")
strsplit(seq_name, "-")[[1]][1]
